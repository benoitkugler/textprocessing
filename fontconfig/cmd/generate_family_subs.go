package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/benoitkugler/textprocessing/fontconfig"
)

func main() {
	output := os.Args[1]

	packageName := filepath.Base(filepath.Dir(output))
	if packageName == "" {
		log.Fatal("invalid output file", output)
	}

	substitutions, err := fontconfig.GenerateSubstitution()
	if err != nil {
		log.Fatal("generating substitutions:", err)
	}

	f, err := os.Create(output)
	if err != nil {
		log.Fatal(err, output)
	}

	fmt.Fprintf(f, `package %s

import "github.com/go-text/typesetting/language"

// Code generated by textprocessing/fontconfig/cmd/generate_family_subs DO NOT EDIT.

var familySubstitution = []substitution{
	`, packageName)

	for _, subs := range substitutions {
		var c []string
		for _, s := range subs.AdditionalFamilies {
			c = append(c, fmt.Sprintf("%q", s))
		}
		fmt.Fprintf(f, `// %s
		{
			test     :           %s,
			additionalFamilies : []string{%s},
			op               :   %s,
		},
		`, subs.Comment, subs.TestCode, strings.Join(c, ", "), subs.OpCode)
	}

	fmt.Fprintln(f, "}")

	f.Close()
	exec.Command("gofmt", "-w", output).Run()
}
